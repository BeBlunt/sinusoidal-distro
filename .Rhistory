#############################################################
fitsinu.ecdf <- function(data, flip = FALSE, init.par = c(1, 1), lower.par = c(0.1, 0.1), upper.par = c(100, 100), pgtol = 0) {
a.out <- min(data); d.out <- max(data) - a.out
data.std <- (data - a.out) / d.out; ecdfAdj <- ecdf(data.std)
ks.score <- function(pars) {
omega <- pars[1]; chi <- pars[2]
devs <- ecdfAdj(data.std) - psinu(data.std, 0, 1, omega, chi, flip = FALSE)
return(mean(devs^2))
}
optim1 <- optim(init.par, ks.score, method = 'L-BFGS-B', lower = lower.par, upper = upper.par, control = list(pgtol = pgtol))
optim1$par <- c(a.out, d.out, optim1$par)
return(optim1)
}
target=c(mu.t, sigma.t^2, 0, 0)
mu.t = 2; sigma.t = 3
target=c(mu.t, sigma.t^2, 0, 0)
out = fitsinu.msm(target); out
target; sinu(out[1], out[2], out[3], out[4])
curve(dnorm(x, mean=mu.t, sd=sigma.t), from=-7, to=11)
curve(dsinu(x, out[1], out[2], out[3], out[4]), add=T, col='red')
out
mu.t = 2; sigma.t = 3
target=c(mu.t, sigma.t^2, 0, 0)
out = fitsinu.msm(target)$par
curve(dnorm(x, mean=mu.t, sd=sigma.t), from=-7, to=11)
curve(dsinu(x, out[1], out[2], out[3], out[4]), add=T, col='red')
out
target=c(0, 1, 0, 0)
fit1 = fitsinu.msm(target)
par1 = fit1$par
curve(dnorm(x), xlim=c(0,1))
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
curve(dnorm(x), xlim=c(-3,3))
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
par
par1
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=302; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T)
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.6; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
### BINOMIAL ###
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
fit1 = fitsinu.msm(target)
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1,')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3]par1[4],')')), fill=c('green','red'))
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3]par1[4],')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3],par1[4],')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), 'Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(1000, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c(paste0('Binom(',n,p,')'), 'Sinu()'), fill=c('green','red'))
n
legend('topright', legend=c(paste0('Binom(',n,',',p,')'), 'Sinu()'), fill=c('green','red'))
### GAMMA ###
alph.t = 2; beta.t = 3
target=c(alph.t/beta.t, alph.t/beta.t^2, 2/sqrt(alph.t), 6/alph.t)
out = fitsinu.msm(target, flip=T); out
target; sinu.mms(out[1], out[2], out[3], out[4], flip=T)
### GAMMA ###
alph.t = 2; beta.t = 3
target=c(alph.t/beta.t, alph.t/beta.t^2, 2/sqrt(alph.t), 6/alph.t)
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dgamma(x, shape=alph.t, rate=beta.t), from=-1, to=2)
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4], flip=T), add=T, col='red')
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
p=0.99; filename=paste0('critPts_',p,'.csv')
for (chi in chi.vec) {
for (omega in omega.vec) {
xi.vec = c(xi.vec, round(qsinu(p, omega=omega, chi=chi), 2))
}
}
mat1 = matrix(xi.vec, ncol=10, byrow=T)
rownames(mat1) = chi.vec
colnames(mat1) = omega.vec
write.table(mat1, file=filename, quote=F, sep=',')
filename
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
d=99, p=d/100
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
d=99; p=d/100
for (chi in chi.vec) {
for (omega in omega.vec) {
xi.vec = c(xi.vec, round(qsinu(p, omega=omega, chi=chi), 2))
}
}
mat1 = matrix(xi.vec, ncol=10, byrow=T)
rownames(mat1) = chi.vec
colnames(mat1) = omega.vec
filename=paste0('critPts',d,'.csv')
write.table(mat1, file=filename, quote=F, sep=',')
sinu.skew(0,1,3,1)
sinu.skew(0,1,-3,1)
sinu.skew(0,1,0.3,1)
log(3)
log(1)
omega.vec = chi.vec = seq(1,10, by=0.01)
skew.vec = kurt.vec = c()
red.vec = green.vec = c()
j=0
for (omega in omega.vec) {
for (chi in chi.vec) {
skew.vec = c(skew.vec, sinu.skew(omega=omega, chi=chi))
kurt.vec = c(kurt.vec, sinu.kurt(omega=omega, chi=chi))
print(c(omega,chi))
}
}
omega.vec = chi.vec = seq(1,10, by=0.01)
skew.vec = kurt.vec = c()
red.vec = green.vec = c()
j=0
for (omega in omega.vec) {
for (chi in chi.vec) {
skew.vec = c(skew.vec, sinu.skew(omega=omega, chi=chi))
kurt.vec = c(kurt.vec, sinu.kurt(omega=omega, chi=chi))
print(c(omega,chi))
}
}
omega.vec = chi.vec = seq(1,10, by=0.1)
n = length(omega.vec)
skew.vec = kurt.vec = c()
red.vec = green.vec = c()
j=0
for (j in 1:n) {
for (i in 1:n) {
skew.vec[i,j] = sinu.skew(omega=omega.vec[i], chi=chi.vec[j])
kurt.vec[i,j] = sinu.kurt(omega=omega.vec[i], chi=chi.vec[j])
print(c(i,j))
}
}
skew.vec = kurt.vec = matrix(0, ncol=n,nrow=n)
omega.vec = chi.vec = seq(1,10, by=0.1)
n = length(omega.vec)
skew.mat = kurt.mat = matrix(0, ncol=n,nrow=n)
red.vec = green.vec = c()
j=0
for (j in 1:n) {
for (i in 1:n) {
skew.mat[i,j] = sinu.skew(omega=omega.vec[i], chi=chi.vec[j])
kurt.mat[i,j] = sinu.kurt(omega=omega.vec[i], chi=chi.vec[j])
print(c(i,j))
}
}
plot(skew.mat, kurt.mat, l.vec, 0), type='p', pch=15)
plot(skew.mat, kurt.mat), type='p', pch=15)
plot(skew.mat, kurt.mat, type='p', pch=15)
mat.plot(skew.mat, kurt.mat, col= , type='p', pch=15)
matplot(skew.mat, kurt.mat, type='p', pch=15)
###
chickwts
###
chickData = chickwts$weight
mean(chickData)
? skewness
?? skewness
?? kurtosis
library(agricolae)
chickData = chickwts$weight
target= c(mean(chickData), var(chickData), skewness(chickData), kurtosis(chickData))
fitsinu.msm.hist(chickData, str='Weights from chickwts dataset')
###fitsinu.mms.hist for PMFs
fitsinu.msm.hist = function (data, str='', flip=F) {
fit1 = fitsinu.msm(target)
par1 = fit1$par
hist(data, prob=T, xlab='x', main='')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4], flip), add=T, col='red', lwd=2)
pars = paste(round(par1, 1), collapse=', ')
if (str=='')
str = deparse(substitute(data))
sinu.str = paste0('Sinu(',pars,')')
legend('topright', legend=c(str, sinu.str), fill=c('green','red'))
}
###fitsinu.mms.hist for PMFs
fitsinu.msm.hist = function (data, str='', flip=F) {
fit1 = fitsinu.msm(target)
par1 = fit1$par
hist(data, prob=T, xlab='x', main='')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4], flip), add=T, col='red', lwd=2)
pars = paste(round(par1, 1), collapse=', ')
if (str=='')
str = deparse(substitute(data))
sinu.str = paste0('Sinu(',pars,')')
legend('topright', legend=c(str, sinu.str), fill=c('green','red'))
}
n=30; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fitsinu.msm.hist(rbinom(1000, n,p), str='Binom(30, 0.8)')
library(agricolae)
chickData = chickwts$weight
target= c(mean(chickData), var(chickData), skewness(chickData), kurtosis(chickData))
fitsinu.msm.hist(chickData, str='Weights from chickwts dataset')
? income
?? income
tidyr
relig_income
library(tidyr)
relig_income
us_rent_income
aggregate(estimate, by=list(variable), data=us_rent_income)
attach(us_rent_income)
aggregate(estimate, by=list(variable))
aggregate(estimate, by=list(variable), FUN=c)
var(chickData)
c(mean(chickData), var(chickData), skewness(chickData), kurtosis(chickData))
chickData
print(chickData)
print(chickData)
? split
?? sep
? separate
? strsplit
### chickwts
chickData = strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '')
chickData
### chickwts
chickData = as.numerical(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', ''))
### chickwts
chickData = numeric(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', ''))
### chickwts
chickData = as.numeric(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', ''))
### chickwts
chickData = as.numeric(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))
### chickwts
chickData = as.vector(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))
chickData
### chickwts
chickData = vector(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))
### chickwts
chickData = unlist(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))
chickData
### chickwts
chickData = numeric(unlist(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ',')))
? numeric
### chickwts
chickData = as.numeric(unlist(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ',')))
chickData
### chickwts
chickData = as.numeric((strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ',')))
unlist
### chickwts
chickData = as.numeric(unlist(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))); chickData
### chickwts
chickData = as.integer(unlist(strsplit('179 160 136 227 217 168 108 124 143 140 309 229 181 141 260 203 148 169 213 257 244 271 243 230 248 327 329 250 193 271 316 267 199 171 158 248 423 340 392 339 341 226 320 295 334 322 297 318 325 257 303 315 380 153 263 242 206 344 258 368 390 379 260 404 318 352 359 216 222 283 332', '', ','))); chickData
chickData = c(179, 160, 136, 227, 217, 168, 108, 124, 143, 140, 309, 229, 181, 141, 260, 203, 148, 169, 213, 257, 244, 271, 243, 230, 248, 327, 329, 250, 193, 271, 316, 267, 199, 171, 158, 248, 423, 340, 392, 339, 341, 226, 320, 295, 334, 322, 297, 318, 325, 257, 303, 315, 380, 153, 263, 242, 206, 344, 258, 368, 390, 379, 260, 404, 318, 352, 359, 216, 222, 283, 332)
target = c(261.30985915, 6095.50261569, -0.01186245, -0.88437779)
fitsinu.msm.hist(chickData, str='Weights from chickwts dataset')
qsinu.omegaChi = function(q, omega, chi, switch=F) {
qsinu(q, 0,1, omega, chi, switch)
}
qsinu.omegaChi = function(q, omega, chi, switch=F) {
qsinu(q, 0,1, omega, chi, switch)
}
omega.vec = 1:20
chi.vec = 1:20
m = length(omega.vec)
n = length(chi.vec)
q.mat = mat(0, ncol=m, nrow=n)
qsinu.omegaChi = function(q, omega, chi, switch=F) {
qsinu(q, 0,1, omega, chi, switch)
}
omega.vec = 1:20
chi.vec = 1:20
m = length(omega.vec)
n = length(chi.vec)
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.vec[i,j] = qsinu.omegaChi(0.95, omega.vec[j], chi.vec[i])
}
}
qsinu.omegaChi = function(q, omega, chi, switch=F) {
qsinu(q, 0,1, omega, chi, switch)
}
omega.vec = 1:20
chi.vec = 1:20
m = length(omega.vec)
n = length(chi.vec)
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = qsinu.omegaChi(0.95, omega.vec[j], chi.vec[i])
}
}
matplot(q.mat, type='o')
qsinu.omegaChi = function(q, omega, chi, switch=F) {
qsinu(q, 0,1, omega, chi, switch)
}
omega.vec = c(1:9/10, 1:11)
chi.vec = c(1:9/10, 1:11)
m = length(omega.vec)
n = length(chi.vec)
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = qsinu.omegaChi(0.95, omega.vec[j], chi.vec[i])
}
}
matplot(q.mat, type='o')
? table
as.table(q.mat)
rownames(q.mat)=chi.vec; colnames(q.mat)=omega.vec
as.table(q.mat)
rownames(q.mat)=paste0('chi'=chi.vec); colnames(q.mat)=omega.vec
as.table(q.mat)
rownames(q.mat)=paste0('chi='chi.vec); colnames(q.mat)=omega.vec
paste('cHI', chi.vec)
paste0('cHI', chi.vec)
rownames(q.mat)=paste0('$\chi=',chi.vec,'$'); colnames(q.mat)=paste0('\$omega=',omega.vec,'$')
rownames(q.mat)=paste0('$\\chi=',chi.vec,'$'); colnames(q.mat)=paste0('\$omega=',omega.vec,'$')
rownames(q.mat)=paste0('$\\ chi=',chi.vec,'$'); colnames(q.mat)=paste0('\$omega=',omega.vec,'$')
rownames(q.mat)=paste0('$ \\ chi=',chi.vec,'$'); colnames(q.mat)=paste0('\$omega=',omega.vec,'$')
rownames(q.mat)=paste0('$ \\ chi=',chi.vec,'$'); colnames(q.mat)=paste0('$ \ omega=',omega.vec,'$')
as.table(q.mat)
rownames(q.mat)=paste0('$ \\chi=',chi.vec,'$'); colnames(q.mat)=paste0('$ \ omega=',omega.vec,'$')
as.table(q.mat)
rownames(q.mat)=paste0('$ \chi=',chi.vec,'$'); colnames(q.mat)=paste0('$ \ omega=',omega.vec,'$')
rownames(q.mat)=paste0('$\\chi=',chi.vec,'$'); colnames(q.mat)=paste0('$\\omega=',omega.vec,'$')
as.table(q.mat)
? write.csv
qsinu.omegaChi = function(p, omega, chi, switch=F) {
qsinu(p, 0,1, omega, chi, switch)
}
omega.vec = c(1:9/10, 1:11)
chi.vec = c(1:9/10, 1:11)
m = length(omega.vec)
n = length(chi.vec)
p = 0.95
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = qsinu.omegaChi(p, omega.vec[j], chi.vec[i])
}
}
rownames(q.mat)=paste0('$\\chi=',chi.vec,'$'); colnames(q.mat)=paste0('$\\omega=',omega.vec,'$')
tab1 = as.table(q.mat)
write.csv(tab1, '')
filename = paste0('critPt',p*100,'.csv')
write.csv(tab1, filename)
qsinu.omegaChi = function(p, omega, chi, switch=F) {
qsinu(p, 0,1, omega, chi, switch)
}
omega.vec = c(1:9/10, 1:11)
chi.vec = c(1:9/10, 1:11)
m = length(omega.vec)
n = length(chi.vec)
p = 0.95
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = round(qsinu.omegaChi(p, omega.vec[j], chi.vec[i]),2)
}
}
rownames(q.mat)=paste0('$\\chi=',chi.vec,'$'); colnames(q.mat)=paste0('$\\omega=',omega.vec,'$')
tab1 = as.table(q.mat)
filename = paste0('critPt',p*100,'.csv')
write.csv(tab1, filename)
matplot(q.mat, type='o')
qsinu.omegaChi = function(p, omega, chi, switch=F) {
qsinu(p, 0,1, omega, chi, switch)
}
omega.vec = c(1:9/10, 1:11)
chi.vec = c(1:9/10, 1:11)
m = length(omega.vec)
n = length(chi.vec)
p = 0.95
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = round(qsinu.omegaChi(p, omega.vec[j], chi.vec[i]),2)
}
}
rownames(q.mat)=chi.vec; colnames(q.mat)=omega.vec
tab1 = as.table(q.mat)
filename = paste0('critPt',p*100,'.csv')
write.csv(tab1, filename)
matplot(q.mat, type='o')
qsinu.omegaChi = function(p, omega, chi, switch=F) {
qsinu(p, 0,1, omega, chi, switch)
}
omega.vec = c(1:4*2/10, 1:8)
chi.vec = c(1:9/10, 1:15)
m = length(omega.vec)
n = length(chi.vec)
p = 0.95
q.mat = matrix(0, ncol=m, nrow=n)
for (i in 1:n) {
for (j in 1:m) {
q.mat[i,j] = round(qsinu.omegaChi(p, omega.vec[j], chi.vec[i]),3)
}
}
rownames(q.mat)=chi.vec; colnames(q.mat)=omega.vec
tab1 = as.table(q.mat)
filename = paste0('critPt',p*100,'.csv')
write.csv(tab1, filename)
#matplot(q.mat, type='o')

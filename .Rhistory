text3 = expression(delta==2)
text4 = expression(omega==3)
text5 = expression(chi==4)
text = c(text1,text2,text3,text4,text5)
legend('topright', legend=text, fill=c('black', 'grey','green','red','blue'))
plot(main='g')
curve(dsinu(x), xlim=c(0,2), ylim=c(0,2.7), main='PDFs', sub='of various Sinu')
curve(dsinu(x, alpha=1), col='grey', add=T)
curve(dsinu(x, delta=2), col='green', add=T)
curve(dsinu(x, omega=3), col='red', add=T)
curve(dsinu(x, chi=4), col='blue', add=T)
text1 = 'Sinu(0,1,1,1)'
text2 = expression(alpha==1)
text3 = expression(delta==2)
text4 = expression(omega==3)
text5 = expression(chi==4)
text = c(text1,text2,text3,text4,text5)
legend('topright', legend=text, fill=c('black', 'grey','green','red','blue'))
curve(dsinu(x), xlim=c(0,2), ylim=c(0,2.7), main='PDFs')
curve(dsinu(x, alpha=1), col='grey', add=T)
curve(dsinu(x, delta=2), col='green', add=T)
curve(dsinu(x, omega=3), col='red', add=T)
curve(dsinu(x, chi=4), col='blue', add=T)
text1 = 'Sinu(0,1,1,1)'
text2 = expression(alpha==1)
text3 = expression(delta==2)
text4 = expression(omega==3)
text5 = expression(chi==4)
text = c(text1,text2,text3,text4,text5)
legend('topright', legend=text, fill=c('black', 'grey','green','red','blue'))
curve(dsinu(x), xlim=c(0,2), ylim=c(0,2.7), main='PDFs', ylab='PDF')
curve(dsinu(x, alpha=1), col='grey', add=T)
curve(dsinu(x, delta=2), col='green', add=T)
curve(dsinu(x, omega=3), col='red', add=T)
curve(dsinu(x, chi=4), col='blue', add=T)
text1 = 'Sinu(0,1,1,1)'
text2 = expression(alpha==1)
text3 = expression(delta==2)
text4 = expression(omega==3)
text5 = expression(chi==4)
text = c(text1,text2,text3,text4,text5)
legend('topright', legend=text, fill=c('black', 'grey','green','red','blue'))
curve(dsinu(x), xlim=c(0,2), ylim=c(0,2.7), main='PDFs', ylab='Density')
curve(dsinu(x, alpha=1), col='grey', add=T)
curve(dsinu(x, delta=2), col='green', add=T)
curve(dsinu(x, omega=3), col='red', add=T)
curve(dsinu(x, chi=4), col='blue', add=T)
text1 = 'Sinu(0,1,1,1)'
text2 = expression(alpha==1)
text3 = expression(delta==2)
text4 = expression(omega==3)
text5 = expression(chi==4)
text = c(text1,text2,text3,text4,text5)
legend('topright', legend=text, fill=c('black', 'grey','green','red','blue'))
par(mfrow=c(4,4), mar=c(1,1,1,1))
omega.vec = c(0.2, 0.6, 1,5)
chi.vec = c(0.2, 0.6, 1,5)
for (omega in omega.vec) {
for (chi in chi.vec) {
curve(dsinu(x, 0,1, omega, chi))
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
curve(dsinu(x, 0,1, omega, chi, T))
}
}
par(mfrow=c(4,4))
omega.vec = c(0.2, 0.6, 1,5)
chi.vec = c(0.2, 0.6, 1,5)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6))
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
curve(dsinu(x, 0,1, omega, chi, T))
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6))
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), ylab=NA)
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), ylab='NA')
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
par(mfrow=c(4,4))
omega.vec = c(0.2, 0.6, 1,5)
chi.vec = c(0.2, 0.6, 1,5)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), yaxt='n')
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
curve(dsinu(x, 0,1, omega, chi, T))
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), yaxt='n')
#curve(dsinu(x, 0,1, omega, chi, T), add=T, col='red')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), xaxt='n',yaxt='n')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6.3), xaxt='n',yaxt='n')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,7), xaxt='n',yaxt='n')
}
}
par(mfrow=c(6,6))
omega.vec = c(0.2, 0.6, 1,2,3,4)
chi.vec = c(0.2, 0.6, 1,2,3,4)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,7), xaxt='n',yaxt='n')
}
}
for (omega in omega.vec) {
for (chi in chi.vec) {
curve(dsinu(x, 0,1, omega, chi, T))
}
}
par(mfrow=c(6,6))
omega.vec = c(0.2, 0.6, 1,2,3,4)
chi.vec = c(0.2, 0.6, 1,2,3,4)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,7), xaxt='n',yaxt='n')
}
}
par(mfrow=c(6,6), cex.axis=0.8)
omega.vec = c(0.2, 0.6, 1,2,3,4)
chi.vec = c(0.2, 0.6, 1,2,3,4)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,7), xaxt='n')
}
}
par(mfrow=c(6,6), cex.axis=0.8)
omega.vec = c(0.2, 0.6, 1,2,3,4)
chi.vec = c(0.2, 0.6, 1,2,3,4)
for (omega in omega.vec) {
for (chi in chi.vec) {
par(mar=c(0,0,0,0))
curve(dsinu(x, 0,1, omega, chi), ylim=c(0,6), xaxt='n')
}
}
dsinu <- function(x, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
sineCurve <- function(z) {
z.s <- flip * (1 - z) + (!flip) * z
(sin(pi * z.s^omega))^chi
}
sineArea <- integrate(sineCurve, lower = 0, upper = 1)$value
z <- (x - alpha) / delta
pdf <- numeric(length(x))
within_support <- (z >= 0) & (z <= 1)
pdf[within_support] <- sineCurve(z[within_support]) / (sineArea * delta)
return(pdf)
}
psinu <- Vectorize(function(q, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
if (q <= alpha) {
cdf <- 0
} else if (q <= alpha + delta) {
q.std <- (q - alpha) / delta
cdf <- integrate(dsinu, lower = 0, upper = q.std, omega = omega, chi = chi, flip = flip)$value
} else {
cdf <- 1
}
return(cdf)
}, vectorize.args = 'q')
qsinu <- Vectorize(function(p, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
if (p < 0 || p > 1) {
return(NA)
}
z <- uniroot(function(t) psinu(t, 0, 1, omega, chi, flip) - p, interval = c(0, 1))$root
return(z * delta + alpha)
}, vectorize.args = 'p')
rsinu <- function(n, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
qsinu(runif(n), alpha, delta, omega, chi, flip)
}
sinu.rmom <- function(r, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
rmom.integrand <- function(x) {
x^r * dsinu(x, alpha = alpha, delta = delta, omega = omega, chi = chi, flip = flip)
}
rmomVal <- integrate(rmom.integrand, lower = alpha, upper = alpha + delta)$value
return(rmomVal)
}
sinu.cmom <- function(r, alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
meanVal <- sinu.rmom(1, alpha, delta, omega, chi, flip)
cmom.integrand <- function(x) {
(x - meanVal)^r * dsinu(x, alpha = alpha, delta = delta, omega = omega, chi = chi, flip = flip)
}
cmomVal <- integrate(cmom.integrand, lower = alpha, upper = alpha + delta)$value
return(cmomVal)
}
sinu.mean <- function(alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
sinu.rmom(1, alpha, delta, omega, chi, flip)
}
sinu.var <- function(alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
sinu.cmom(2, alpha, delta, omega, chi, flip)
}
sinu.skew <- function(alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
cmom2 <- sinu.cmom(2, alpha, delta, omega, chi, flip)
cmom3 <- sinu.cmom(3, alpha, delta, omega, chi, flip)
(cmom3 / cmom2^(3/2))
}
sinu.kurt <- function(alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
cmom2 <- sinu.cmom(2, alpha, delta, omega, chi, flip)
cmom4 <- sinu.cmom(4, alpha, delta, omega, chi, flip)
(cmom4 / cmom2^2) - 3
}
sinu.msm <- function(alpha = 0, delta = 1, omega = 1, chi = 1, flip = FALSE) {
measures <- c(
sinu.mean(alpha, delta, omega, chi, flip),
sinu.var(alpha, delta, omega, chi, flip),
sinu.skew(alpha, delta, omega, chi, flip),
sinu.kurt(alpha, delta, omega, chi, flip)
)
return(measures)
}
fitsinu.msm <- function(msm.target, flip = FALSE, init.par = c(1, 1), lower.par = c(0.01, 0.01), upper.par = c(500, 500)) {
mean.t <- msm.target[1]; var.t <- msm.target[2]; gamma.t <- msm.target[3]; kappa.t <- msm.target[4]
costFn <- function(pars) {
omega <- pars[1]; chi <- pars[2]
skLoss <- sinu.skew(0, 1, omega, chi, flip) - gamma.t
kuLoss <- sinu.kurt(0, 1, omega, chi, flip) - kappa.t
sum(abs(skLoss), abs(kuLoss))
}
optim1 <- optim(init.par, fn = costFn, lower = lower.par, upper = upper.par, method = "L-BFGS-B")
omega_optim <- optim1$par[1]
chi_optim <- optim1$par[2]
delta_cor <- sqrt(var.t / sinu.var(0, 1, omega_optim, chi_optim, flip))
alpha_cor <- mean.t - sinu.mean(0, delta_cor, omega_optim, chi_optim, flip)
optim1$par <- c(alpha_cor, delta_cor, omega_optim, chi_optim)
return(optim1)
}
###########################################################
fitsinu.hel <- function(PDF.str, flip = FALSE, init.par = c(0, 1, 1, 1), lower.par = c(-100, 0.1, 0.1, 0.1), upper.par = c(100, 100, 1000, 1000)) {
parsed_expr <- parse(text = PDF.str)
targetPDF <- function(x) eval(parsed_expr)
helDist <- function(pars) {
aIn <- pars[1]; dIn <- pars[2]; oIn <- pars[3]; cIn <- pars[4]
ff <- function(x) {
sqrt(dsinu(x, aIn, dIn, oIn, cIn, flip) * targetPDF(x))
}
1 - integrate(ff, lower = aIn, upper = aIn + dIn)$value
}
optim1 <- optim(init.par, helDist, lower = lower.par, upper = upper.par, method = 'L-BFGS-B')
optim1
}
#############################################################
fitsinu.ecdf <- function(data, flip = FALSE, init.par = c(1, 1), lower.par = c(0.1, 0.1), upper.par = c(100, 100), pgtol = 0) {
a.out <- min(data); d.out <- max(data) - a.out
data.std <- (data - a.out) / d.out; ecdfAdj <- ecdf(data.std)
ks.score <- function(pars) {
omega <- pars[1]; chi <- pars[2]
devs <- ecdfAdj(data.std) - psinu(data.std, 0, 1, omega, chi, flip = FALSE)
return(mean(devs^2))
}
optim1 <- optim(init.par, ks.score, method = 'L-BFGS-B', lower = lower.par, upper = upper.par, control = list(pgtol = pgtol))
optim1$par <- c(a.out, d.out, optim1$par)
return(optim1)
}
target=c(mu.t, sigma.t^2, 0, 0)
mu.t = 2; sigma.t = 3
target=c(mu.t, sigma.t^2, 0, 0)
out = fitsinu.msm(target); out
target; sinu(out[1], out[2], out[3], out[4])
curve(dnorm(x, mean=mu.t, sd=sigma.t), from=-7, to=11)
curve(dsinu(x, out[1], out[2], out[3], out[4]), add=T, col='red')
out
mu.t = 2; sigma.t = 3
target=c(mu.t, sigma.t^2, 0, 0)
out = fitsinu.msm(target)$par
curve(dnorm(x, mean=mu.t, sd=sigma.t), from=-7, to=11)
curve(dsinu(x, out[1], out[2], out[3], out[4]), add=T, col='red')
out
target=c(0, 1, 0, 0)
fit1 = fitsinu.msm(target)
par1 = fit1$par
curve(dnorm(x), xlim=c(0,1))
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
curve(dnorm(x), xlim=c(-3,3))
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
par
par1
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=302; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T)
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.6; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
### BINOMIAL ###
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
fit1 = fitsinu.msm(target)
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
n=32; p=0.7; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c('N(0,1)','Sinu()'), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1,')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3]par1[4],')')), fill=c('green','red'))
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(300, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3]par1[4],')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), paste0('Sinu(',par1[1],par1[2],par1[3],par1[4],')')), fill=c('green','red'))
legend('topright', legend=c(paste0('Binom(',n,p,')'), 'Sinu()'), fill=c('green','red'))
n=32; p=0.8; q=1-p
target=c(n*p, n*p*q, (q-p)/sqrt(n*p*q), (1-6*p*q)/(n*p*q))
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
#curve(dbinom(x, n,p), xlim=c(0,n), ylab='PDF', col='green')
hist(rbinom(1000, n,p), prob=T, xlab='x')
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4]), add=T, col='red')
legend('topright', legend=c(paste0('Binom(',n,p,')'), 'Sinu()'), fill=c('green','red'))
n
legend('topright', legend=c(paste0('Binom(',n,',',p,')'), 'Sinu()'), fill=c('green','red'))
### GAMMA ###
alph.t = 2; beta.t = 3
target=c(alph.t/beta.t, alph.t/beta.t^2, 2/sqrt(alph.t), 6/alph.t)
out = fitsinu.msm(target, flip=T); out
target; sinu.mms(out[1], out[2], out[3], out[4], flip=T)
### GAMMA ###
alph.t = 2; beta.t = 3
target=c(alph.t/beta.t, alph.t/beta.t^2, 2/sqrt(alph.t), 6/alph.t)
fit1 = fitsinu.msm(target)
par1 = fit1$par
par1
curve(dgamma(x, shape=alph.t, rate=beta.t), from=-1, to=2)
curve(dsinu(x, par1[1], par1[2], par1[3], par1[4], flip=T), add=T, col='red')
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
p=0.99; filename=paste0('critPts_',p,'.csv')
for (chi in chi.vec) {
for (omega in omega.vec) {
xi.vec = c(xi.vec, round(qsinu(p, omega=omega, chi=chi), 2))
}
}
mat1 = matrix(xi.vec, ncol=10, byrow=T)
rownames(mat1) = chi.vec
colnames(mat1) = omega.vec
write.table(mat1, file=filename, quote=F, sep=',')
filename
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
d=99, p=d/100
omega.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
chi.vec = c(0.2, 0.4, 0.6, 0.8, 1:6)
xi.vec = c()
d=99; p=d/100
for (chi in chi.vec) {
for (omega in omega.vec) {
xi.vec = c(xi.vec, round(qsinu(p, omega=omega, chi=chi), 2))
}
}
mat1 = matrix(xi.vec, ncol=10, byrow=T)
rownames(mat1) = chi.vec
colnames(mat1) = omega.vec
filename=paste0('critPts',d,'.csv')
write.table(mat1, file=filename, quote=F, sep=',')
sinu.skew(0,1,3,1)
sinu.skew(0,1,-3,1)
sinu.skew(0,1,0.3,1)
log(3)
log(1)
omega.vec = chi.vec = seq(1,10, by=0.01)
skew.vec = kurt.vec = c()
red.vec = green.vec = c()
j=0
for (omega in omega.vec) {
for (chi in chi.vec) {
skew.vec = c(skew.vec, sinu.skew(omega=omega, chi=chi))
kurt.vec = c(kurt.vec, sinu.kurt(omega=omega, chi=chi))
print(c(omega,chi))
}
}
